/**
 * @fileoverview Firestore Security Rules for Jenn's Dream Billing Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for patient data and associated claims. Only the authenticated user whose ID matches the patient ID can access patient and claim data.
 *
 * Data Structure:
 * - /patients/{patientId}: Stores patient information. The patientId is the unique identifier for the patient and matches the authenticated user's UID.
 * - /patients/{patientId}/claims/{claimId}: Stores claim information associated with a specific patient.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read and write access to patients and their claims is restricted to the owner (the authenticated user with matching patient ID).
 * - Data validation is limited to ensuring that the `patientId` in claim documents matches the `patientId` in the path, enforcing relational integrity.
 *
 * Denormalization for Authorization:
 * The `claim` documents do not need to explicitly copy the `patientId` from the path. The path contains the patientId and can be used to validate the request.
 *
 * Structural Segregation:
 * There is no public/private segregation. All data is considered private and requires authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to patient documents.
     * @path /patients/{patientId}
     * @allow (create) Authenticated user creates a patient document with an ID matching their UID.
     * @allow (get, list, update, delete) Authenticated user reads, updates, or deletes their own patient document.
     * @deny (create) Authenticated user attempts to create a patient document with an ID different from their UID.
     * @deny (get, list, update, delete) Unauthenticated user attempts to access patient data.
     * @principle Enforces document ownership for reads and writes.
     */
    match /patients/{patientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(patientId) {
        return request.auth.uid == patientId;
      }

      function isExistingOwner(patientId) {
        return isOwner(patientId) && resource != null;
      }

      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(patientId);
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Controls access to claim documents nested under a patient.
     * @path /patients/{patientId}/claims/{claimId}
     * @allow (create) Authenticated user creates a claim document under their patient document.
     * @allow (get, list, update, delete) Authenticated user reads, updates, or deletes a claim document under their patient document.
     * @deny (create) Authenticated user attempts to create a claim document under a different patient document.
     * @deny (get, list, update, delete) Unauthenticated user attempts to access claim data.
     * @principle Enforces document ownership and relational integrity for nested claim documents.
     */
    match /patients/{patientId}/claims/{claimId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(patientId) {
        return request.auth.uid == patientId;
      }

      function isExistingOwner(patientId) {
        return isOwner(patientId) && resource != null;
      }

      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId);
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }
  }
}